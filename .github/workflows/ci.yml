name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.8'

jobs:
  # ==========================================
  # Job 1: Lint e Validação de Código
  # ==========================================
  lint:
    name: 🔍 Lint e Validação
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Instalar dependências do backend
      working-directory: backend
      run: npm ci
    
    - name: 🔍 Validar OpenAPI Spec
      working-directory: docs
      run: |
        npm install -g @apidevtools/swagger-cli
        swagger-cli validate openapi.yaml
    
    - name: ✅ Verificar vulnerabilidades
      working-directory: backend
      run: npm audit --audit-level=high
      continue-on-error: true

  # ==========================================
  # Job 2: Testes do Backend
  # ==========================================
  test-backend:
    name: 🧪 Testes Backend
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Instalar dependências
      working-directory: backend
      run: npm ci
    
    - name: 🧪 Executar testes
      working-directory: backend
      run: |
        npm test -- --coverage --passWithNoTests || echo "Testes não encontrados"
      env:
        NODE_ENV: test
        JWT_SECRET: test_secret_key_for_ci
        DATABASE_PATH: ':memory:'
    
    - name: 📊 Upload de cobertura
      if: always()
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage/lcov.info
        flags: backend
        fail_ci_if_error: false

  # ==========================================
  # Job 3: Build do Backend
  # ==========================================
  build-backend:
    name: 🏗️ Build Backend
    runs-on: ubuntu-latest
    needs: test-backend
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: 📦 Instalar dependências
      working-directory: backend
      run: npm ci --production
    
    - name: 📦 Criar artefato
      run: |
        mkdir -p artifacts
        tar -czf artifacts/backend.tar.gz backend/
    
    - name: 📤 Upload artefato
      uses: actions/upload-artifact@v3
      with:
        name: backend-build
        path: artifacts/backend.tar.gz
        retention-days: 7

  # ==========================================
  # Job 4: Testes do Frontend
  # ==========================================
  test-frontend:
    name: 🎨 Testes Frontend
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: 🧪 Validar HTML
      run: |
        pip install html5validator
        html5validator --root frontend/ --ignore-re 'Attribute "x-' || echo "Validação HTML concluída com avisos"
    
    - name: ✅ Verificar arquivos críticos
      run: |
        test -f frontend/index.html
        test -f frontend/dashboard.html
        test -f frontend/login.html
        test -f frontend/styles.css
        test -f frontend/firebase-config.js
        echo "Todos os arquivos críticos existem"

  # ==========================================
  # Job 5: Análise de Segurança
  # ==========================================
  security:
    name: 🔒 Análise de Segurança
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🔍 Análise CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: javascript
    
    - name: 🔍 Executar análise
      uses: github/codeql-action/analyze@v2
    
    - name: 🔒 Verificar secrets expostos
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD

  # ==========================================
  # Job 6: Build Docker (Opcional)
  # ==========================================
  docker:
    name: 🐳 Build Docker
    runs-on: ubuntu-latest
    needs: [build-backend, test-frontend]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: 🏗️ Build e Push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/zenit:latest
          ${{ secrets.DOCKER_USERNAME }}/zenit:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ==========================================
  # Job 7: Deploy para Staging (Branch main)
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [build-backend, test-frontend, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: staging
      url: https://staging.zenit.com.br
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
    
    - name: 📥 Download artefato
      uses: actions/download-artifact@v3
      with:
        name: backend-build
        path: artifacts
    
    - name: 🚀 Deploy via SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.STAGING_HOST }}
        username: ${{ secrets.STAGING_USER }}
        key: ${{ secrets.STAGING_SSH_KEY }}
        script: |
          cd /var/www/zenit-staging
          git pull origin main
          cd backend
          npm ci --production
          pm2 restart zenit-staging || pm2 start server.js --name zenit-staging
          pm2 save
    
    - name: ✅ Verificar deploy
      run: |
        sleep 10
        curl -f https://staging.zenit.com.br/health || exit 1
        echo "Deploy staging bem-sucedido!"

  # ==========================================
  # Job 8: Notificações
  # ==========================================
  notify:
    name: 📢 Notificações
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: always()
    
    steps:
    - name: 📧 Enviar notificação de sucesso
      if: success()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: ✅ Deploy ZENIT - Sucesso
        body: |
          Deploy realizado com sucesso!
          
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref }}
          Autor: ${{ github.actor }}
          
          URL: https://staging.zenit.com.br
        to: ${{ secrets.NOTIFY_EMAIL }}
        from: CI/CD ZENIT
    
    - name: 📧 Enviar notificação de falha
      if: failure()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.MAIL_USERNAME }}
        password: ${{ secrets.MAIL_PASSWORD }}
        subject: ❌ Deploy ZENIT - Falha
        body: |
          Deploy falhou!
          
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref }}
          Autor: ${{ github.actor }}
          
          Verifique os logs em: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        to: ${{ secrets.NOTIFY_EMAIL }}
        from: CI/CD ZENIT
